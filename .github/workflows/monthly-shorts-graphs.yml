```python
#!/usr/bin/env python3
"""
Análisis longitudinal y gráficos de YouTube Shorts basados en los resúmenes mensuales generados por `shorts_stats.py`.

Requisitos:
- Archivos CSV mensuales en `data/shorts_stats/shorts_summary_YYYY-MM.csv`.
- Python 3.10+
- Paquetes: pandas, matplotlib

Salida:
- CSV maestro: `data/shorts_stats/resumen_shorts.csv`
- Gráficos en `data/shorts_stats/graficos/`:
    - cantidad_shorts.png
    - vistas_totales.png
    - vistas_promedio.png
    - engagement_rate.png
"""
import pandas as pd
import matplotlib.pyplot as plt
from pathlib import Path


def main():
    # Rutas de entrada y salida
    INPUT_DIR = Path("data/shorts_stats")
    MASTER_CSV = INPUT_DIR / "resumen_shorts.csv"
    GRAFICOS_DIR = INPUT_DIR / "graficos"
    GRAFICOS_DIR.mkdir(parents=True, exist_ok=True)

    # Buscar archivos de resumen mensuales
    archivos = sorted(INPUT_DIR.glob("shorts_summary_*.csv"))
    if not archivos:
        print(f"⚠️ No se encontraron archivos shorts_summary_*.csv en {INPUT_DIR}")
        return

    # Leer y concatenar
    df_list = []
    for file in archivos:
        periodo = file.stem.split("_")[2]  # shorts_summary_YYYY-MM
        df = pd.read_csv(file)
        df["Periodo"] = pd.to_datetime(periodo, format="%Y-%m")
        df_list.append(df)

    df_all = pd.concat(df_list, ignore_index=True)
    if df_all.empty:
        print("⚠️ No hay datos para analizar después de concatenar.")
        return

    # Calcular métricas derivadas
    df_all["VistasPromedio"] = df_all["TotalVistas"] / df_all["CantidadShorts"].replace(0, pd.NA)
    df_all["EngagementRate"] = (
        (df_all["TotalLikes"]) / df_all["TotalVistas"].replace(0, pd.NA)
    )

    # Guardar CSV maestro
    df_all.to_csv(MASTER_CSV, index=False)
    print(f"✅ CSV maestro guardado en {MASTER_CSV}")

    # Función de gráfico
    def plot_line(y_col, title, ylabel, filename):
        plt.figure(figsize=(10, 6))
        for canal, grupo in df_all.groupby("Nombre"):
            plt.plot(
                grupo["Periodo"],
                grupo[y_col],
                marker="o",
                label=canal
            )
        plt.title(title)
        plt.xlabel("Periodo")
        plt.ylabel(ylabel)
        plt.xticks(rotation=45)
        plt.grid(True, linestyle="--", alpha=0.3)
        plt.legend(title="Canal", bbox_to_anchor=(1.05, 1), loc='upper left')
        plt.tight_layout()
        plt.savefig(GRAFICOS_DIR / filename)
        plt.close()

    # Crear gráficos
    plot_line("CantidadShorts", "Shorts publicados por mes", "Cantidad de Shorts", "cantidad_shorts.png")
    plot_line("TotalVistas", "Vistas totales por mes", "Vistas Totales", "vistas_totales.png")
    plot_line("VistasPromedio", "Vistas promedio por Short", "Vistas Promedio", "vistas_promedio.png")
    plot_line("EngagementRate", "Engagement rate por mes", "Engagement Rate (likes/vistas)", "engagement_rate.png")

    print(f"✅ Gráficos guardados en {GRAFICOS_DIR}")

if __name__ == "__main__":
    main()
```
